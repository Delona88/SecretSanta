/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Person;
import io.swagger.model.SecretSantaGame;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-02-16T11:27:20.662Z[GMT]")
public interface GamesApi {

    @Operation(summary = "Add game", description = "Create new game", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created") })
    @RequestMapping(value = "/games",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addGame(@Parameter(in = ParameterIn.DEFAULT, description = "game to add", required=true, schema=@Schema()) @Valid @RequestBody SecretSantaGame body);


    @Operation(summary = "Add participant", description = "Add participant", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/games/{id}/participants/{email}",
        method = RequestMethod.POST)
    ResponseEntity<Void> addPersonInGame(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email);


    @Operation(summary = "Delete game", description = "Delete game", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/games/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteGame(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Delete participant", description = "Delete participant", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/games/{id}/participants/{email}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePersonFromGame(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email);


    @Operation(summary = "Get game by id", description = "Get game by id", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Game", content = @Content(schema = @Schema(implementation = SecretSantaGame.class))) })
    @RequestMapping(value = "/games/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SecretSantaGame> getGameById(@Parameter(in = ParameterIn.PATH, description = "to get game", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Get new ID", description = "Get new ID", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "New ID", content = @Content(schema = @Schema(implementation = Integer.class))) })
    @RequestMapping(value = "/games",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getNewID();


    @Operation(summary = "Get all persons by game ID", description = "Get all persons by game ID", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Array persons", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Person.class)))) })
    @RequestMapping(value = "/games/{id}/participants",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Person>> getPersonsByGameId(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Set played", description = "Set played", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/games/{id}/played",
        method = RequestMethod.POST)
    ResponseEntity<Void> setGamePlayed(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "played" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "played", required = true) Boolean played);


    @Operation(summary = "Start toss", description = "Start toss", tags={ "Games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/games/{id}/toss",
        method = RequestMethod.POST)
    ResponseEntity<Void> startToss(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id);

}

