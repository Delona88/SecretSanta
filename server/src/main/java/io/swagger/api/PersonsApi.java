/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Person;
import io.swagger.model.PersonGame;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-02-16T11:27:20.662Z[GMT]")
public interface PersonsApi {

    @Operation(summary = "Add person", description = "Add person", tags={ "Persons" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created") })
    @RequestMapping(value = "/persons",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addPerson(@Parameter(in = ParameterIn.DEFAULT, description = "Person", required=true, schema=@Schema()) @Valid @RequestBody Person body);


    @Operation(summary = "Add person game", description = "Add person game", tags={ "Person games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/persons/{email}/persongame",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addPersonGameToPerson(@Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email, @Parameter(in = ParameterIn.DEFAULT, description = "Array emails", required=true, schema=@Schema()) @Valid @RequestBody PersonGame body);


    @Operation(summary = "Delete person", description = "Delete person", tags={ "Persons" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/persons/{email}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePerson(@Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email);


    @Operation(summary = "Delete person game", description = "Delete person game", tags={ "Person games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/persons/{email}/persongame/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePersonGameFromPerson(@Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email, @Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Get all persons", description = "Get all Persons", tags={ "Persons" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Array persons", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Person.class)))) })
    @RequestMapping(value = "/persons",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Person>> getAllPersons();


    @Operation(summary = "Get person by id", description = "Get person by id", tags={ "Persons" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Person", content = @Content(schema = @Schema(implementation = Person.class))) })
    @RequestMapping(value = "/persons/{email}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Person> getPersonById(@Parameter(in = ParameterIn.PATH, description = "to get person", required=true, schema=@Schema()) @PathVariable("email") String email);


    @Operation(summary = "Replace person", description = "Replace person", tags={ "Persons" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/persons/{email}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> replacePerson(@Parameter(in = ParameterIn.PATH, description = "to get person", required=true, schema=@Schema()) @PathVariable("email") String email, @Parameter(in = ParameterIn.DEFAULT, description = "Person", required=true, schema=@Schema()) @Valid @RequestBody Person body);


    @Operation(summary = "Set naughty list", description = "Set naughty list", tags={ "Person games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/persons/{email}/persongame/{id}/naughtylist",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> setNaughtyList(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email, @Parameter(in = ParameterIn.DEFAULT, description = "Person game", required=true, schema=@Schema()) @Valid @RequestBody List<String> body);


    @Operation(summary = "Set active", description = "Set active", tags={ "Person games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/persons/{email}/persongame/{id}/active",
        method = RequestMethod.POST)
    ResponseEntity<Void> setPersonGameActive(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email, @NotNull @Parameter(in = ParameterIn.QUERY, description = "active" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "active", required = true) Boolean active);


    @Operation(summary = "Set receiver", description = "Set receiver", tags={ "Person games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/persons/{email}/persongame/{id}/receiver",
        method = RequestMethod.POST)
    ResponseEntity<Void> setReceiver(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email, @NotNull @Parameter(in = ParameterIn.QUERY, description = "receiverEmail" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "receiverEmail", required = true) String receiverEmail);


    @Operation(summary = "Set whishlist", description = "Set whishlist", tags={ "Person games" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/persons/{email}/persongame/{id}/wishlist",
        method = RequestMethod.POST)
    ResponseEntity<Void> setWhishlist(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "email", required=true, schema=@Schema()) @PathVariable("email") String email, @NotNull @Parameter(in = ParameterIn.QUERY, description = "wishlist" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "wish", required = true) String wish);

}

